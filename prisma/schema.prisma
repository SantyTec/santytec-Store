generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category {
  id               String     @id @default(uuid())
  name             String
  products         Product[]
  parentCategory   Category?  @relation(name: "Category to Subcategories", fields: [parentCategoryId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  parentCategoryId String?
  subcategories    Category[] @relation(name: "Category to Subcategories")

  @@index([parentCategoryId])
}

model Discount {
  id    String       @id @default(uuid())
  name  String
  type  DiscountType
  value Decimal

  createdAt DateTime @default(now())

  orders     Order[]     @relation("OrderDiscounts")
  orderItems OrderItem[] @relation("OrderItemDiscounts")
}

model Order {
  id               Int         @id @default(autoincrement())
  email            String      @default("")
  phone            String      @default("")
  name             String      @default("")
  originalSubtotal Decimal     @default(0)
  discountAmount   Decimal     @default(0)
  finalSubtotal    Decimal     @default(0)
  isPaid           Boolean     @default(false)
  status           OrderStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discounts  Discount[]  @relation("OrderDiscounts")
  userId     String?
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]
}

model OrderItem {
  id                 String     @id @default(uuid())
  orderId            Int
  order              Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId          String?
  product            Product?   @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  productNameAtOrder String
  quantity           Int
  originalSubtotal   Decimal    @default(0)
  discountAmount     Decimal    @default(0)
  finalSubtotal      Decimal    @default(0)
  priceAtOrder       Decimal    @default(1.99)
  discounts          Discount[] @relation("OrderItemDiscounts")

  @@index([orderId])
  @@index([productId])
}

model Product {
  id          String      @id @unique @default(uuid())
  description String?
  isArchived  Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  name        String
  price       Decimal
  stock       Int
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      Image[]
  orderItems  OrderItem[]
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  savedCart SavedCart?
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

model SavedCart {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     Json // { productId, quantity }[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([productId])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED
}
